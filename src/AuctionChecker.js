import React, { useState } from "react";

function AuctionChecker() {
  const [token, setToken] = useState("");
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);

  const checkAuction = async () => {
    setLoading(true);
    try {
      const res = await fetch("https://api.hyperliquid.xyz/info", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          type: "spotDeployState",
          coin: token.toUpperCase(),
        }),
      });

      const data = await res.json();

      if (data?.gasAuction) {
        const { startTimeSeconds, durationSeconds, startGas, endGas } = data.gasAuction;

        const date = new Date(startTimeSeconds * 1000);
        const endDate = new Date((startTimeSeconds + durationSeconds) * 1000);

        setResult({
          date: date.toLocaleString(),
          endDate: endDate.toLocaleString(),
          startGas,
          endGas: endGas || "–µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è",
        });
      } else {
        setResult({ error: "–ê—É–∫—Ü–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è." });
      }
    } catch (error) {
      setResult({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö." });
    }
    setLoading(false);
  };

  return (
    <div style={{ padding: "2rem", maxWidth: 600, margin: "auto", background: "#fff", borderRadius: 12 }}>
      <h2>üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –∞—É–∫—Ü–∏–æ–Ω–∞ Hyperliquid</h2>
      <input
        type="text"
        value={token}
        onChange={(e) => setToken(e.target.value)}
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, SOLV)"
        style={{
          padding: "0.5rem",
          fontSize: "1rem",
          width: "100%",
          marginBottom: "1rem",
        }}
      />
      <button
        onClick={checkAuction}
        style={{
          padding: "0.5rem 1rem",
          fontSize: "1rem",
          cursor: "pointer",
        }}
        disabled={loading}
      >
        {loading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"}
      </button>

      {result && (
        <div style={{ marginTop: "1rem", fontSize: "1rem" }}>
          {result.error ? (
            <p style={{ color: "red" }}>{result.error}</p>
          ) : (
            <>
              <p>üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞—É–∫—Ü–∏–æ–Ω–∞: {result.date}</p>
              <p>‚è≥ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {result.endDate}</p>
              <p>üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞: {result.startGas}</p>
              <p>üßæ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≥–∞–∑–∞: {result.endGas}</p>
            </>
          )}
        </div>
      )}
    </div>
  );
}

export default AuctionChecker;
